#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""MAP2212 - EP1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sJLpMsHpbsQ-5hJ-nSs2Wr76YcHY6N1D

"""

#bibliotecas
import random
import numpy as np
from math import pi
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.patches import Circle


def gera_pontos(n):
  """
  Funcao para gerar dois array com n pares de pontos 
  """
  x = np.random.uniform(low=-1,high=1, size=n)
  y = np.random.uniform(low=-1,high=1, size=n)

  return x, y

def dentro_do_circulo (ponto):
  """
  Retorna true se o ponto(s) esta dentro do circulo de raio 1,
  false se não estiver.
  """
  return ponto[0]**2 + ponto[1]**2 <= 1

#Escreva seu nome e numero USP
INFO = {11811012:"Vinícius da Costa Collaço"}
def estima_pi(Seed = None):
    """
    Esta funcao deve retornar a sua estimativa para o valor de PI
    Escreva o seu codigo nas proximas linhas
    """
    random.seed(Seed)
    np.random.seed(Seed)

    n = 4256126 #n calculado estatisticamente

    pontos = gera_pontos(int(n))
    pontos_dentro = dentro_do_circulo(pontos)
    pi_estimado = 4*(sum(np.where(pontos_dentro == True,1,0))/n)
    
    return pi_estimado #Retorne sua estimativa

def gera_grafico(n,Seed = None):
  #pontos e calculo de pi
  np.random.seed(Seed)
  pontos = gera_pontos(int(n))
  pontos_dentro = dentro_do_circulo(pontos)
  dentro_fora = np.where(pontos_dentro == True,'dentro do círculo','fora do círculo')
  pi_estimado = 4*(sum(np.where(pontos_dentro == True,1,0))/n)
  
  #grafico
  plt.figure(figsize=(9,9))
  ax = plt.gca()
  circle = Circle((0, 0), 1, facecolor='none',edgecolor='k')
  ax.add_patch(circle)
  plt.axis([-1, 1, -1, 1])
  plt.title ('Estimativa do $\pi$ = %.4f, para n = %d'%(pi_estimado,n))
  sns.scatterplot(pontos[0],pontos[1],hue=dentro_fora,legend=False,markers='.',s=20)
  plt.savefig('estima_pi, n = %d' %(n))

def dentro_do_erro (n, acuracia, Seed = None):
  """
  funcao para mostrar quantas estimativas do pi estao dentro 
  da acuracia definida
  """
  lista = []
  semente = Seed
  for i in range (n):
    lista.append((abs(estima_pi(semente)-pi)/pi) < acuracia)
    semente += 1
  lista_array = np.array(lista)  
  soma_true = sum(np.where(lista_array == True,1,0))
  
  return (soma_true/n)
